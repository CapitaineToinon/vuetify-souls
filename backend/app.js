/**
 * Requires
 */
require('dotenv').config();
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const axios = require('axios');

/**
 * Content of the public folder will be generated by Webpack
 */
const PUBLIC_FOLDER = path.join(__dirname, 'public');

/**
 * Routes
 *
 * We are only handling the REST API on the backend
 * The rest of the routes is handled client side using Vue
 */
const apiRouter = require('./routes/api');
const wrapiRouter = require('./routes/wrapi');

/**
 * App
 */
const app = express();

/**
 * Axios handler for timeouts
 * Will trigger the regular error handler
 */
axios.interceptors.response.use(
    config => config,
    (error) => {
        error.code = 408;
        return Promise.reject(error);
    },
);

/**
 * Express defaults
 */
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(PUBLIC_FOLDER));

/**
 * Listen for API calls...
 */
app.use('/api', apiRouter);
app.use('/wrapi', wrapiRouter);

/**
 * Redirect the rest to the Vue app
 * index.html needs to be generated by Webpack
 */
app.use((req, res) => {
    res.sendFile(`${PUBLIC_FOLDER}/index.html`);
});

/**
 * Error handler
 * http://expressjs.com/en/guide/error-handling.html
 */
app.use((err, req, res, next) => {
    // eslint-disable-next-line
    console.error(err.stack);
    /**
     * Using err.response when the error is caused by speedrun.com
     * Using err.code when the error is caused by our own api or twitch api
     */
    const status = (err.response) ? err.response.status || 500 : err.code || 500;
    const statusText = (err.response) ? err.response.statusText || '' : '';
    const message = err.message || '';
    res.status(status).json({
        status,
        statusText,
        message,
    });
});

module.exports = app;
